---
title: "Working with Parameters"
---

## Understanding IMF Database Parameters

The IMF API uses a parameter-based system for querying data. Each database has its own set of parameters that can be used to filter and specify the data you want to retrieve. There are two main functions for working with parameters:

- `imf_parameters()`: Get the full list of parameters and valid input codes for a database
- `imf_parameter_defs()`: Get text descriptions of what each parameter means

## Discovering Available Parameters

To get started, you'll need to know what parameters are available for your chosen database. Use `imf_parameters()` to get this information:

```python
# Fetch list of valid parameters for the Primary Commodity Price System database
params = imfp.imf_parameters("PCPS")

# View the available parameter names
print(params.keys())

# Get descriptions of what each parameter means
imfp.imf_parameter_defs("PCPS")
```

Each parameter in the returned dictionary contains a data frame with:
- `input_code`: The valid codes you can use for that parameter
- `description`: What each code represents

For example, to see the valid frequency codes:

```python
# View the data frame of valid input codes for the frequency parameter
params['freq']
```

## Two Ways to Supply Parameters

### 1. List Arguments (Recommended for Beginners)

Supply parameters directly as arguments to `imf_dataset`:

```python
# Example: Get annual coal prices
df = imfp.imf_dataset(
    database_id="PCPS",
    freq=["A"],  # Annual frequency
    commodity=["PCOAL"],  # Coal prices
    start_year=2000,
    end_year=2015
)
```

### 2. Parameters Dictionary (More Concise)

Modify the parameters dictionary and pass it to `imf_dataset`:

```python
# Filter the parameters dictionary
params['freq'] = params['freq'][params['freq']['description'].str.contains("Annual")]
params['commodity'] = params['commodity'][params['commodity']['description'].str.contains("Coal")]

# Pass the modified dictionary
df = imfp.imf_dataset(
    database_id="PCPS",
    parameters=params,
    start_year=2000,
    end_year=2015
)
```

## Understanding Return Values

The returned data frame will contain columns corresponding to your parameters, plus:

- `time_format`: ISO 8601 duration codes (e.g., "P1Y" means "periods of 1 year")
- `unit_mult`: Number of zeros to add to values (e.g., 6 for millions, 9 for billions)

You can decode parameter values using the original parameters dictionary:

```python
# Example: Decode reference area codes
df = df.merge(
    params['ref_area'], 
    left_on='ref_area',
    right_on='input_code',
    how='left'
).drop(columns=['ref_area','input_code']).rename(columns={"description":"ref_area"})
```

### Fetching a List of Parameters and Input Codes with `imf_parameters` and `imf_parameter_defs`

Once you have a `database_id`, it’s possible to make a call to `imfp.imf_dataset` to fetch the entire database: `imfp.imf_dataset(database_id)`. However, while this will succeed for a few small databases, it will fail for all of the larger ones. And even in the rare case when it succeeds, fetching an entire database can take a long time. You’re much better off supplying additional filter parameters to reduce the size of your request.

Requests to databases available through the IMF API are complicated by the fact that each database uses a different set of parameters when making a request. (At last count, there were 43 unique parameters used in making API requests from the various databases!) You also have to have the list of valid input codes for each parameter. The `imfp.imf_parameters` function solves this problem. Use the function to obtain the full list of parameters and valid input codes for a given database:

``` {python}
# Fetch list of valid parameters and input codes for commodity price database
params = imfp.imf_parameters("PCPS")
```

The `imfp.imf_parameters` function returns a dictionary of data frames. Each dictionary key name corresponds to a parameter used in making requests from the database:

``` {python}
# Get key names from the params object
params.keys()
```

In the event that a parameter name is not self-explanatory, the `imfp.imf_parameter_defs` function can be used to fetch short text descriptions of each parameter:

``` {python}
# Fetch and display parameter text descriptions for the commodity price database
imfp.imf_parameter_defs("PCPS")
```


Each named list item is a data frame containing a vector of valid input codes that can be used with the named parameter, and a vector of text descriptions of what each code represents.

To access the data frame containing valid values for each parameter, subset the `params` dict by the parameter name:

``` {python}
# View the data frame of valid input codes for the frequency parameter
params['freq']
```


### Supplying Parameter Arguments to `imf_dataset`: A Tale of Two Workflows

There are two ways to supply parameters to `imfp.imf_dataset`: by supplying list arguments or by supplying a modified parameters dict. The list arguments workflow will be more intuitive for most users, but the dict argument workflow requires a little less code.

#### The List Arguments Workflow

To supply list arguments, just find the codes you want and supply them to `imfp.imf_dataset` using the parameter name as the argument name. The example below shows how to request 2000–2015 annual coal prices from the Primary Commodity Price System database:

``` {python}
# Fetch the 'freq' input code for annual frequency
selected_freq = list(
    params['freq']['input_code'][params['freq']['description'].str.contains("Annual")]
)

# Fetch the 'commodity' input code for coal
selected_commodity = list(
    params['commodity']['input_code'][params['commodity']['description'].str.contains("Coal")]
)

# Fetch the 'unit_measure' input code for index
selected_unit_measure = list(
    params['unit_measure']['input_code'][params['unit_measure']['description'].str.contains("Index")]
)

# Request data from the API
df = imfp.imf_dataset(database_id = "PCPS",
         freq = selected_freq, commodity = selected_commodity,
         unit_measure = selected_unit_measure,
         start_year = 2000, end_year = 2015)

# Display the first few entries in the retrieved data frame
df.head()
```

#### The Parameters Argument Workflow

To supply a list object, modify each data frame in the `params` list object to retain only the rows you want, and then supply the modified list object to `imfp.imf_dataset` as its parameters argument. Here is how to make the same request for annual coal price data using a parameters list:

``` {python}
# Fetch the 'freq' input code for annual frequency
params['freq'] = params['freq'][params['freq']['description'].str.contains("Annual")]

# Fetch the 'commodity' input code(s) for coal
params['commodity'] = params['commodity'][params['commodity']['description'].str.contains("Coal")]

# Fetch the 'unit_measure' input code for index
params['unit_measure'] = params['unit_measure'][params['unit_measure']['description'].str.contains("Index")]

# Request data from the API
df = imfp.imf_dataset(database_id = "PCPS",
         parameters = params,
         start_year = 2000, end_year = 2015)

# Display the first few entries in the retrieved data frame
df.head()
```
