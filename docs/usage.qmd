---
title: "Suggestions for Usage"
---

## Usage

### Suggested packages

`imfp` outputs data in a `pandas` data frame, so you will want to use the `pandas` package for its functions for viewing and manipulating this object type. We also recommend `matplotlib` or `seaborn` for making plots, and `numpy` for computation. These packages can be installed using `pip` and loaded using `import`:

```bash
pip install -q pandas matplotlib seaborn numpy
```

``` {python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
```

### Working with Large Data Frames

### Viewing Data Frames

Note that `pandas` data frames in Python can be a little difficult to work with, because Python doesn't have a built-in variable explorer. If you're doing data science, I recommend using an IDE like RStudio or Spyder that has a built-in variable explorer. However, if you don't have a variable explorer, you can prevent Python from truncating data frames using the `options` in `pandas`. For instance, to increase the maximum allowed column width to 100 characters, we can use `pandas.options.display.max_colwidth = 100`.

Alternatively, it's possible to open the data frame in a new window to view it in full:

``` {python}
#| eval: false
import imfp
import tempfile
import webbrowser

# Define a simple function to view data frame in a browser window
def View(df):
    html = df.to_html()
    with tempfile.NamedTemporaryFile('w', delete=False, suffix='.html') as f:
        url = 'file://' + f.name
        f.write(html)
    webbrowser.open(url)

# Open data frame in a new browser window using the function
df = imfp.imf_databases()
View(df)
```

Or you might consider chatting with your large dataframe via [pandasAI](https://github.com/Sinaptik-AI/pandas-ai).

### Caching Data

## Understanding IMF API Rate Limits

The IMF API has an application-based rate limit of 50 requests per second. Each application is identified by the "user_agent" variable in the request header. By default, all `imfp` users share the same application name, which could lead to rate limit issues if many users are making requests simultaneously.

## Setting a Custom Application Name

To avoid hitting rate limits, you should set a unique application name for your requests:

```python
imfp.set_imf_app_name("my_custom_app_name")
```

The `set_imf_app_name()` function:
- Sets the application name in the `IMF_APP_NAME` environment variable
- Creates the variable if it doesn't exist
- Validates that the name is:
  - Not missing
  - A string
  - Less than 255 characters
  - Not the default "imfr" name

## Managing Wait Times Between Calls

### Default Behavior

By default, `imfp`:
- Enforces a 1.5-second wait between API calls
- Retries failed calls up to 3 times
- Uses exponential backoff starting at 5 seconds for retries

### Customizing Wait Time

If you're running parallel processes or experiencing rate limit issues, you can increase the wait time:

```python
# Example: Set a 5-second wait time between calls
imfp.set_imf_wait_time(5)
```

## Best Practices

1. **Use a Unique App Name**: Always set a custom application name for your project
2. **Filter Requests**: Use parameters to limit the data you're requesting
3. **Batch Processing**: For large datasets, consider breaking requests into smaller batches
4. **Monitor Responses**: Watch for rate limit errors and adjust wait times if needed
5. **Parallel Processing**: If running parallel processes, increase the wait time accordingly

## Error Handling

When a rate limit is hit, `imfp`:
1. Automatically waits for the specified time
2. Retries the request
3. Increases wait time exponentially on subsequent failures
4. Stops after 3 attempts (by default)

You can modify retry behavior by setting the `times` argument in API calls, though increasing it beyond 3 is not recommended due to the exponential backoff.


## Rate and Bandwidth Limit Management

### Setting a Unique Application Name with `set_imf_app_name`

`imfp.set_imf_app_name()` allows users to set a custom application name to be used when making API calls to the IMF API. The IMF API has an application-based rate limit of 50 requests per second, with the application identified by the "user_agent" variable in the request header.

This could prove problematic if the `imfp` library became too popular and too many users tried to make simultaneous API requests using the default app name. By setting a custom application name, users can avoid hitting rate limits and being blocked by the API. `imfp.set_imf_app_name()` sets the application name by changing the `IMF_APP_NAME` variable in the environment. If this variable doesn't exist, `imfp.set_imf_app_name()` will create it.

To set a custom application name, simply call the `imfp.set_imf_app_name()` function with your desired application name as an argument:

``` {python}
# Set custom app name as an environment variable
imfp.set_imf_app_name("my_custom_app_name")
```

The function will throw an error if the provided name is missing, NULL, NA, not a string, or longer than 255 characters. If the provided name is "imfr" (the default) or an empty string, the function will issue a warning recommending the use of a unique app name to avoid hitting rate limits.

### Changing the enforced wait time between API calls with `set_imf_wait_time`

By default, `imfp` enforces a mandatory 1.5-second wait time between API calls to prevent repeated or recursive calls from exceeding the API's bandwidth/rate limit. This wait time should be sufficient for most applications. However, if you are running parallel processes using `imfp` (e.g. during cross-platform testing), this wait time may be insufficient to prevent you from running up against the API's rate and bandwidth limits. You can change this wait time by calling the `set_imf_wait_time` function with a numeric value, in seconds. For instance, to enforce a five-second wait time between API calls, use `set_imf_wait_time(10)`.

Also note that by default, `imfp` functions will retry any API call rejected for bandwidth or rate limit reasons. The number of times `imfp` will attempt the call is set by the `times` argument, with a default value of 3. (With this value, requests will be retried twice after an initial failure.) Note that `imfp` enforces an exponentially increasing wait time between function calls, with a base wait time of 5 seconds on the first retry, so it is not recommended to set a high value for `times`.